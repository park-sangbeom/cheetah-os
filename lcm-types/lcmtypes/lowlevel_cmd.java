/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lowlevel_cmd implements lcm.lcm.LCMEncodable
{
    public float q_des[];
    public float qd_des[];
    public float kp_joint[];
    public float kd_joint[];
    public float p_des[];
    public float v_des[];
    public float kp_cartesian[];
    public float kd_cartesian[];
    public float tau_ff[];
    public float f_ff[];
 
    public lowlevel_cmd()
    {
        q_des = new float[12];
        qd_des = new float[12];
        kp_joint = new float[12];
        kd_joint = new float[12];
        p_des = new float[12];
        v_des = new float[12];
        kp_cartesian = new float[12];
        kd_cartesian = new float[12];
        tau_ff = new float[12];
        f_ff = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x958bd82c21bf3d98L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.lowlevel_cmd.class))
            return 0L;
 
        classes.add(lcmtypes.lowlevel_cmd.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.q_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qd_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.kp_joint[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.kd_joint[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.p_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.v_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.kp_cartesian[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.kd_cartesian[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.tau_ff[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.f_ff[a]); 
        }
 
    }
 
    public lowlevel_cmd(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lowlevel_cmd(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.lowlevel_cmd _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.lowlevel_cmd o = new lcmtypes.lowlevel_cmd();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.q_des = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.q_des[a] = ins.readFloat();
        }
 
        this.qd_des = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qd_des[a] = ins.readFloat();
        }
 
        this.kp_joint = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.kp_joint[a] = ins.readFloat();
        }
 
        this.kd_joint = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.kd_joint[a] = ins.readFloat();
        }
 
        this.p_des = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.p_des[a] = ins.readFloat();
        }
 
        this.v_des = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.v_des[a] = ins.readFloat();
        }
 
        this.kp_cartesian = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.kp_cartesian[a] = ins.readFloat();
        }
 
        this.kd_cartesian = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.kd_cartesian[a] = ins.readFloat();
        }
 
        this.tau_ff = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tau_ff[a] = ins.readFloat();
        }
 
        this.f_ff = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.f_ff[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.lowlevel_cmd copy()
    {
        lcmtypes.lowlevel_cmd outobj = new lcmtypes.lowlevel_cmd();
        outobj.q_des = new float[(int) 12];
        System.arraycopy(this.q_des, 0, outobj.q_des, 0, 12); 
        outobj.qd_des = new float[(int) 12];
        System.arraycopy(this.qd_des, 0, outobj.qd_des, 0, 12); 
        outobj.kp_joint = new float[(int) 12];
        System.arraycopy(this.kp_joint, 0, outobj.kp_joint, 0, 12); 
        outobj.kd_joint = new float[(int) 12];
        System.arraycopy(this.kd_joint, 0, outobj.kd_joint, 0, 12); 
        outobj.p_des = new float[(int) 12];
        System.arraycopy(this.p_des, 0, outobj.p_des, 0, 12); 
        outobj.v_des = new float[(int) 12];
        System.arraycopy(this.v_des, 0, outobj.v_des, 0, 12); 
        outobj.kp_cartesian = new float[(int) 12];
        System.arraycopy(this.kp_cartesian, 0, outobj.kp_cartesian, 0, 12); 
        outobj.kd_cartesian = new float[(int) 12];
        System.arraycopy(this.kd_cartesian, 0, outobj.kd_cartesian, 0, 12); 
        outobj.tau_ff = new float[(int) 12];
        System.arraycopy(this.tau_ff, 0, outobj.tau_ff, 0, 12); 
        outobj.f_ff = new float[(int) 12];
        System.arraycopy(this.f_ff, 0, outobj.f_ff, 0, 12); 
        return outobj;
    }
 
}

